Front,Back
"Verkle trees","Upgrade: The Verge (stateless clients):contentReference[oaicite:105]{index=105}:contentReference[oaicite:106]{index=106}. Verkle trees use elliptic-curve vector commitments to compress Merkle proofs – each parent-child proof piece is only 32 bytes:contentReference[oaicite:107]{index=107}. They enable *stateless validation*: nodes can verify blocks with only a few hundred KB of proof instead of hundreds of GB of state:contentReference[oaicite:108]{index=108}. This solves state bloat: today a full node needs 1+ TB of state:contentReference[oaicite:109]{index=109}. Verkle trees dramatically reduce proof sizes, making lightweight clients feasible. *Status:* Actively researched (EIPs exist); implemented prototypes in clients. *Challenges:* Vulnerable to quantum attacks (would need replacing later):contentReference[oaicite:110]{index=110} and requires protocol changes (node clients and gas costs)."
"SSZ (SimpleSerialize)","Upgrade: The Purge (data format unification):contentReference[oaicite:111]{index=111}. SSZ is Ethereum’s typed serialization format (used in the beacon chain) that natively supports hashing:contentReference[oaicite:112]{index=112}. It replaces RLP (an untyped legacy encoding) and allows a single unified data structure for consensus and execution state:contentReference[oaicite:113]{index=113}:contentReference[oaicite:114]{index=114}. This simplifies the protocol by making upgrades easier and harmonizing formats (execution state, consensus state, blobs all in one schema):contentReference[oaicite:115]{index=115}. *Solves:* Eliminates RLP complexity and separate commit schemes, enabling easier proofs and coding. *Status:* EIPs (“SSZ-ification”) exist to migrate consensus and execution structures to SSZ:contentReference[oaicite:116]{index=116}. Ongoing development in Purge phase."
"FOCIL (Fork-Choice Enforced Inclusion Lists)",":contentReference[oaicite:117]{index=117}Upgrade: The Scourge (block construction). FOCIL uses a *committee of stakers* who each publish an inclusion list of transactions for the next block:contentReference[oaicite:118]{index=118}. A block builder must include all committee lists. A transaction is delayed only if **all** members censor it, making censorship by builders very hard:contentReference[oaicite:119]{index=119}. *Solves:* Mitigates centralized censorship by block builders (today 2 entities create ~88% of blocks):contentReference[oaicite:120]{index=120}. Returning transaction selection to stakers via inclusion lists prevents single builders from arbitrarily excluding txns:contentReference[oaicite:121]{index=121}:contentReference[oaicite:122]{index=122}. *Status:* Research stage; proposals exist (e.g. EIP-7547 for inclusion lists). Challenges include incentives and coordination of the committee."
"Parallel execution (Native Rollups)","Upgrade: The Surge (execution scaling). Create **N parallel EVM instances** on L1 (“native rollups”):contentReference[oaicite:123]{index=123}. Each copy runs independently (its own state and transactions). This effectively shards execution in software. *Solves:* Increases throughput by parallelizing transaction processing across copies instead of one sequential chain. Theoretically multiplies TPS by N. *Status:* Conceptual; under discussion. Key trade-off: these parallel chains can’t easily interact in one transaction (composability issues):contentReference[oaicite:124]{index=124}:contentReference[oaicite:125]{index=125}. Implementation would require major client/consensus changes."
"Single-slot finality","Upgrade: The Merge (consensus). Finalize each block in **one slot** (~12s) instead of ~15 minutes:contentReference[oaicite:126]{index=126}. Achieving this with 100% validator signing (economic finality) normally causes high overhead. Proposals (e.g. enhanced signature aggregation or hybrid committees) aim to solve that conflict:contentReference[oaicite:127]{index=127}. *Solves:* Speeds up finality so users’ txns are irreversible within seconds:contentReference[oaicite:128]{index=128} and enables 1 ETH staking (down from 32 ETH) for more solo stakers:contentReference[oaicite:129]{index=129}:contentReference[oaicite:130]{index=130}. *Status:* Research/proposals exist (e.g. Horn aggregation, “Orbit SSF” committees):contentReference[oaicite:131]{index=131}. Challenge: handling millions of signatures each slot without massive node overhead."
"Single Secret Leader Election (SSLE)","Upgrade: The Merge (consensus). **Hides the next block proposer** until block time:contentReference[oaicite:132]{index=132}:contentReference[oaicite:133]{index=133}. Validators use cryptographic blinding (shuffle/blinded IDs) so the chosen proposer can prove its right to produce the block, but others cannot identify the proposer in advance:contentReference[oaicite:134]{index=134}. *Solves:* Prevents targeted DoS attacks on proposers (today the next proposer is known in advance):contentReference[oaicite:135]{index=135}. *Status:* Experimental; proposals like “Whisk” mixnets or ring-signature schemes exist:contentReference[oaicite:136]{index=136}. Challenges: added cryptographic complexity and spec code; must be simple enough for mainnet."
"Attester–Proposer Separation (APS)","Upgrade: The Scourge (block construction). A variant of proposer-builder separation: a block builder handles the entire slot (including transaction selection), while the validator (“proposer”) only signs the block:contentReference[oaicite:137]{index=137}. This removes any transaction-selection role from the validator. *Solves:* Further decouples validators from builders and reduces collocation incentives:contentReference[oaicite:138]{index=138}. *Status:* Active research; APS is preferred over PBS because it makes validators pure “dumb pipes.” Implementation would require redesigning the block pipeline. It would apply only to execution blocks, with consensus blocks assigned normally:contentReference[oaicite:139]{index=139}."
"EVM Object Format (EOF)","Upgrade: The Splurge (EVM improvements). A new bytecode container format for smart contracts:contentReference[oaicite:140]{index=140}. EOF separates code and data sections, forbids dynamic jumps, and introduces new opcodes (e.g. CALLDATASIZE). *Solves:* Enables efficient static analysis and optimization of EVM code:contentReference[oaicite:141]{index=141}:contentReference[oaicite:142]{index=142}. Code becomes simpler to analyze (improving safety and optimizer performance) and easier to extend (e.g. add new features). *Status:* READY – already implemented in client software; toggled on in future hard fork. There are no downsides for old code as legacy contracts remain unaffected."
"EVM-MAX (Modular Arithmetic Extensions)","Upgrade: The Splurge (EVM improvements). Adds new opcodes for efficient big-integer arithmetic (e.g. Montgomery multiplication):contentReference[oaicite:143]{index=143}. *Solves:* Speeds up cryptographic operations (hashes, signatures, zero-knowledge proofs) on EVM by offering built-in modular math. Reduces gas for these common heavy ops. *Status:* Proposed via EIPs (e.g. EIP-6601). Under development and to be deployed with upcoming hard fork."
"SIMD (Single Instruction, Multiple Data)","Upgrade: The Splurge (EVM improvements). Introduces vectorized instructions that operate on multiple data lanes simultaneously:contentReference[oaicite:144]{index=144}. For example, one instruction could run the same operation on an array of values. *Solves:* Greatly accelerates parallelizable computations (e.g. cryptography loops) by leveraging parallelism inside the EVM. Particularly useful for verifier-heavy workloads (e.g. rollup proof checks). *Status:* Proposed (e.g. EIP-616); under research. Complexity in the EVM spec is manageable, and gains are high."
"Account Abstraction","Upgrade: The Splurge (account model). Turns Ethereum accounts into smart contracts by default:contentReference[oaicite:145]{index=145}. Each account could define its own signing and transaction validation logic. *Solves:* Enables more secure and flexible account types (multi-sig wallets, account recovery, pay-gas-with-token, etc.) natively at the protocol level. *Status:* Already partly deployed via EIP-4337 (Layer 2). A consensus-layer version is planned in Splurge. Challenges: must ensure new flexibility doesn’t break old contracts."
"Fee Market Improvements","Upgrade: The Splurge (fee economics). Examples include *“tip cap”* (a limit on the priority fee to curb crazy bidding) and dynamic issuance curves (VRGDA) for adjusting ETH issuance relative to fee demand:contentReference[oaicite:146]{index=146}. *Solves:* Stabilizes transaction fees by preventing runaway tips and tuning issuance to demand. The goal is better UX (fewer spikes) and sustainable inflation. *Status:* Design stage; proposals exist. Will be gradual updates with safety bounds (backward compatible):contentReference[oaicite:147]{index=147}."
"Verifiable Delay Functions (VDFs)","Upgrade: The Splurge (randomness). VDFs are functions that require *sequential work* to evaluate and can be efficiently verified:contentReference[oaicite:148]{index=148}. For example, iterated hashing that takes a known time to compute, then proven by a SNARK. *Solves:* Provides unbiased on-chain randomness that cannot be manipulated beyond trivial (RANDAO has 1-bit bias per proposer):contentReference[oaicite:149]{index=149}. This improves fairness for randomness-dependent tasks (validator selection, lotteries). *Status:* Research; no ideal VDF found yet:contentReference[oaicite:150]{index=150}. Deployment would increase complexity slightly but is not required (broken VDF falls back to RANDAO)."
"Encrypted Mempools","Upgrade: The Scourge (block builder designs). Transactions are broadcast in encrypted form with validity proofs:contentReference[oaicite:151]{index=151}. Builders include them in blocks still encrypted, then the contents are revealed later (using threshold decryption or delay decryption):contentReference[oaicite:152]{index=152}. *Solves:* Prevents frontrunning and unfair MEV by hiding transactions from block builders until after ordering. *Status:* Under active research. Key challenges: ensuring timely reveal of each tx; two main approaches are threshold decryption and VDF-based delay:contentReference[oaicite:153]{index=153}."
"Trustless L2 Proof Systems","Upgrade: The Surge (L2 scaling). Ensuring rollups (both optimistic and ZK) have **fully trustless** fraud/validity proofs. Rollups should only accept *valid* blocks enforced by proofs, without central overrides:contentReference[oaicite:154]{index=154}. *Solves:* Eliminates central “security councils” for rollup exit security. Right now most rollups have stage 1 setups (partial trust). The goal is *Stage 2*: no unilateral control by any actor, only intervention on provable bugs:contentReference[oaicite:155]{index=155}. *Status:* Ongoing: some rollups (e.g. Fuel, early ZK rollups) have achieved trustless systems. Research in formal verification of provers and multi-prover schemes (2-of-3 proofs) is active:contentReference[oaicite:156]{index=156}:contentReference[oaicite:157]{index=157}."
"Chain-specific Addresses","Upgrade: The Surge (cross-chain usability). Encode the chain/network ID into Ethereum addresses. For example, a user’s address might include a domain (L1, Optimism, Arbitrum, etc.) so wallets know where funds reside. *Solves:* Simplifies sending assets across L1/L2: sending “to” that address automatically routes through appropriate bridge. No longer need to manage separate addresses per network. *Status:* Proposed concept; implementation would be in wallet software and standards. Improves UX but requires community and EIP adoption."
"Peer-to-Peer DAS (PeerDAS)","Upgrade: The Surge (sharding). In PeerDAS, blob data (large L2 data objects) is distributed via multiple P2P subnets:contentReference[oaicite:160]{index=160}. Each blob is coded into many pieces with erasure codes; nodes sample random pieces across different subnets. *Solves:* Allows Ethereum to support huge blocks (blobs) – e.g. 8–16 blobs per slot (~463–926 TPS):contentReference[oaicite:161]{index=161} – while still ensuring data availability without centralized sequencers. *Status:* Under development. PeerDAS could eventually reach ~58,000 TPS (at 16 MB/slot with sampling):contentReference[oaicite:162]{index=162}. Key challenge: building robust P2P networks and ensuring safety of sampling."
"EIP-4844 (Blobs)","Upgrade: The Surge (activated in 2023). Introduced **blobs**: large data objects posted in blocks for L2 rollup data:contentReference[oaicite:163]{index=163}. Each blob is *committed* on-chain (via KZG) but not executed. *Solves:* Dramatically increases L1 data bandwidth (currently ~375kB/12s); rollups can now post much more data per block (currently ~46 TPS vs ~7000 after sharding):contentReference[oaicite:164]{index=164}. *Status:* Live (Dencun hard fork). Ongoing: planning more blob capacity with DAS."
"Data Compression","Upgrade: The Surge (L2 scaling). Techniques to **reduce bytes per transaction** posted on L1:contentReference[oaicite:165]{index=165}. Examples: simple run-length encoding of zero bytes, BLS signature aggregation (many signatures into one):contentReference[oaicite:166]{index=166}, replacing repeated 20-byte addresses with 4-byte pointers, and compact numeric formats:contentReference[oaicite:167]{index=167}. *Solves:* At 16 MB blobs, raw ERC-20 transfers allow only ~7400 TPS:contentReference[oaicite:168]{index=168}. Compression could multiply throughput (e.g. aggregation turns many signatures into one). *Status:* Research/prototyping. Requires contract changes (e.g. ERC-4337 supports BLS wallet) and minor protocol support. Trade-offs include complexity vs bandwidth gains:contentReference[oaicite:169]{index=169}."
"Generalized Plasma","Upgrade: The Surge (L2 scaling for high-volume payments). An off-chain chain where the operator publishes only the *Merkle root* of each block on L1:contentReference[oaicite:170]{index=170}. Users track their own account updates via Merkle proofs and can exit any time. With **SNARKs** verifying blocks, Plasma can handle all asset types with instant withdrawals:contentReference[oaicite:171]{index=171}. *Solves:* Ultra-high TPS for simple transfers (e.g. stablecoin payments) without posting full data on L1. Even if DA fails, users exit with proof. *Status:* Pure Plasma saw exit delays, but SNARK-based designs (“Plasma with validity proofs”) are being researched. These would let users withdraw immediately and prevent operator fraud more cheaply:contentReference[oaicite:172]{index=172}."
"Parallel Proposers (MCP/BRAID)","Upgrade: The Scourge (block building). Instead of one block proposer, use *k* parallel proposers (Multiple Concurrent Proposers):contentReference[oaicite:173]{index=173}. For example, BRAID protocol has k validators each propose a block list; the final block order is chosen deterministically (e.g. sort by highest fees):contentReference[oaicite:174]{index=174}. *Solves:* Diversifies block production, so no single builder has full control. Helps small validators produce blocks. *Status:* Proposal stage (research by Vitalik and others). More complex than FOCIL, but offers another point on spectrum between full decentralization and specialization:contentReference[oaicite:175]{index=175}."
"Faster Confirmations","Upgrade: The Merge (consensus improvements). Reduce *slot time* and allow real-time pre-confirmations. Two approaches: decrease block time (e.g. from 12s to 4–8s):contentReference[oaicite:176]{index=176}, and/or let the current proposer publish instant signed “pre-confirmation” messages as they see txns:contentReference[oaicite:177]{index=177}. *Solves:* Users see quicker feedback (e.g. “your txn will be in next block”):contentReference[oaicite:178]{index=178}, improving UX. *Status:* Under study. Reducing slot time risks network overhead (latency limits); pre-confirmations trade worst-case latency. Both methods require careful incentive/slashing design:contentReference[oaicite:179]{index=179}."
"Two-tier Staking","Upgrade: The Merge (consensus). Introduce **two classes of validators**: a *high-stake tier* (e.g. 32 ETH) that participates in economic finality, and a *low-stake tier* (e.g. 1 ETH) with limited duties:contentReference[oaicite:180]{index=180}. Low-tier validators may delegate, or provide attestations, or generate inclusion lists. *Solves:* Lets small stakers join with low stakes while preserving strong finality guarantees using only the high-tier votes. *Status:* Proposed (cf. Rainbow DAO). Complex to specify rights of low-tier, but conceptually could be enacted in Merge-era upgrades:contentReference[oaicite:181]{index=181}."
"Inactivity Leak","Upgrade: The Merge (consensus). A mechanism already in Ethereum where, if >1/3 validators drop offline, the finality threshold gradually reduces, allowing finality to resume. *Solves:* Prevents a deadlock if many validators go offline at once by permitting the chain to keep finalizing with fewer signatures (though at higher risk). *Status:* Active (Ethereum has an inactivity leak built-in)."
"History Expiry","Upgrade: The Purge (state pruning). Limits how long nodes store old data. Currently, consensus data ~6 months, blobs ~18 days; EIP-4444 proposes dropping execution blocks/receipts older than ~1 year:contentReference[oaicite:182]{index=182}. *Solves:* Keeps node storage size from growing unboundedly (today ~1.1 TB including ~800 GB history):contentReference[oaicite:183]{index=183}. *Status:* EIP-4444 is in progress; once a robust p2p distribution (torrents/Portal network) exists, clients will enforce the limit:contentReference[oaicite:184]{index=184}:contentReference[oaicite:185]{index=185}."
"State Expiry","Upgrade: The Purge (future research). Various designs to drop unused state over time. For example, *partial state expiry* splits state into chunks, only storing actively accessed chunks:contentReference[oaicite:186]{index=186}. *Address-period expiry* ideas have each address’s data expire unless frequently used:contentReference[oaicite:187]{index=187}. *Solves:* Prevents Ethereum state (account balances, storage) from growing ~50 GB/year forever. *Status:* Experimental (EIP-7736 partial expiry, address-expiry research). Very complex and still unsolved at scale."
"Stateless Clients","Upgrade: The Verge (validation model). A stateless client verifies blocks without storing full state: each block comes with witness proofs of the state slots accessed:contentReference[oaicite:188]{index=188}. *Solves:* A node needs only a few GB of state (all rest can be pruned):contentReference[oaicite:189]{index=189}. This complements Verkle trees. *Status:* Visionary; requires Verge tech (Verkle or STARK trees). Not deployed yet, but guides protocol design (e.g. gas costs for state access)."
"Inclusion Lists","Upgrade: The Scourge (block construction). A validator (proposer) composes an **inclusion list** of transactions for the next block:contentReference[oaicite:190]{index=190}. The chosen block builder must include those txns (though they can reorder and add others). *Solves:* Returns transaction selection to stakers (instead of builders), preventing complete censorship by builders. It’s the basis of APS/FOCIL systems. *Status:* EIP-7547 describes inclusion lists; APS/FOCIL are extensions. Partially used already (MEV-Boost has similar features)."
"Portal Network","Upgrade: The Purge (data availability). A distributed P2P network for storing Ethereum data (blocks, state) off-chain. For example, after EIP-4444 prunes history, Portal nodes hold requested old data and provide proofs. *Solves:* Ensures archival data remains accessible without every node storing it, making light client sync possible. *Status:* Being built (EF’s Portal network). Key for enabling history expiry; could be integrated into client sync."
"Log Bloom Filter Removal","Upgrade: The Purge (cleanup). Drop the 256-byte bloom filter used in event logs:contentReference[oaicite:191]{index=191}. *Solves:* Simplifies block headers and gas costs: bloom filters add consensus overhead but are too slow to use (browsers and clients don’t actually utilize them):contentReference[oaicite:192]{index=192}. Alternative indexing (e.g. off-chain or SNARK-based logs) can replace the bloom. *Status:* Proposed (EIP-7668 for bloom removal). Would require adjusting log-related gas costs."
"Sync Committee Removal","Upgrade: The Purge (consensus cleanup). Remove the Proof-of-Stake sync committee (used for light-client proofs) once we can verify consensus via SNARKs:contentReference[oaicite:193]{index=193}. *Solves:* Cuts protocol complexity: sync committees (160 validators every 2 days) won’t be needed if zk-proof light clients are practical. *Status:* Long-term goal. Ethereum currently still has sync committees; this would happen after Verge technologies mature."
"Mixed-Endianness Removal","Upgrade: The Purge (data consistency). Make all of Ethereum use one endianness (likely big-endian):contentReference[oaicite:194]{index=194}. Today EVM is big-endian, consensus (beacon) is little-endian. *Solves:* Simplifies implementations and cross-layer code. *Status:* Coordination-only change (no hard fork of EVM needed if consensus switches). Expected eventually."
"Gas Unobservability","Upgrade: The Purge (EVM format). In EOF, contracts can no longer read the remaining gas (the previous GAS opcode always returns 0). *Solves:* Prevents contracts from depending on gas left. This makes forks and future EVM versions easier (no contract uses gas as a control). *Status:* Already part of EOF; requires making EOF mandatory (and have old contracts adapted, though none use GAS for logic typically):contentReference[oaicite:195]{index=195}."
"Precompile Removals","Upgrade: The Purge (cleanup). Remove underused EVM precompiles (e.g. identity, RIPEMD-160, elliptic-curve mods):contentReference[oaicite:196]{index=196}. *Solves:* Reduces code complexity and consensus risk from rarely used code. Their functionality can be replaced by contract code if needed (albeit at higher gas). *Status:* First steps: identity precompile EIP exists; more removals can follow. No backward-compat problems for apps not using them."
"Data Format Harmonization","Upgrade: The Purge (simplification). Use a single encoding for all Ethereum data:contentReference[oaicite:197]{index=197}. E.g., store execution and consensus state in one SSZ-based tree, commit everything via the same scheme (replacing Merkle Patricia/KZG mixtures):contentReference[oaicite:198]{index=198}. *Solves:* Eases proofs and data availability: one can build universal light-client and erasure-coding routines. *Status:* Visionary; pieces are moving (RLP→SSZ, consensus in SSZ already). Full unification is long-term."
"KZG Commitments","Upgrade: The Purge (sharding). Polynomial commitment scheme (Kate commitments) used to commit to blobs (shard data) on-chain. *Solves:* Allows very large data (hundreds of KB) to be posted with a short on-chain commitment. Vital for data availability sampling in danksharding. *Status:* Already in use (EIP-4844 blobs use KZG). No issues besides trusting the setup; future research on alternatives (post-quantum commitments) is noted:contentReference[oaicite:199]{index=199}."
"Beacon Committee Removal","Upgrade: The Purge (consensus). Remove validator committees (used originally for sharding/data availability):contentReference[oaicite:200]{index=200}. *Solves:* Simplifies consensus: sharders (beacon committees) were never fully used (Ethereum uses rollups instead). No need for these special validator committees. *Status:* Code removed or being removed; consensus layer no longer assigns committees for anything new."
"Proposer-Builder Separation (PBS)","Upgrade: The Scourge (block construction). Existing partial scheme: validators propose blocks using payloads from third-party builders (like MEV-Boost):contentReference[oaicite:201]{index=201}. *Solves:* Basic reduction of censorship risk by decoupling validator from content. *Status:* Already in use. APS is seen as the stronger concept (builders handle entire slot):contentReference[oaicite:202]{index=202}."
"Erasure Coding (DA)","Upgrade: The Purge (data availability). Distributes large data by splitting it with erasure codes (each piece stored on different nodes):contentReference[oaicite:203]{index=203}. *Solves:* Enhances robustness of historic block storage and sharded data: even if some peers drop out, the data can be recovered from coded pieces. *Status:* Already used for blob data availability. Planned for broader history (reuse blob erasure-coding for old blocks):contentReference[oaicite:204]{index=204}."
"Proof of Custody","Upgrade: The Purge (history availability). Validators are required to prove periodically that they store specific blockchain data chunks:contentReference[oaicite:205]{index=205}. *Solves:* Ensures nodes really keep history (as opposed to just ignoring it). This can increase trust in distributed archival storage. *Status:* Proposed (e.g. Dankrad Feist’s idea); implementation is non-trivial and not yet activated."
"Stateless Gas Changes (EIP-4762)","Upgrade: The Purge. Harmonize gas costs for state operations to support stateless clients. For example, charge for loading each memory chunk:contentReference[oaicite:206]{index=206}. *Solves:* Aligns gas with true resource use for state proofs (as block preimage sizes change with Verkle). *Status:* EIP drafted (4762); part of Purge feature set for simplification."
"Slot Time Reduction","Upgrade: The Merge (consensus). Shorten block time (e.g. from 12s to 8s or 4s):contentReference[oaicite:207]{index=207}. *Solves:* Reduces confirmation latency. *Status:* Possible, but very tight networking needed. Short slots reduce safety margin against network delays:contentReference[oaicite:208]{index=208}."
"Pre-confirmations (Proposer Commitments)","Upgrade: The Merge (consensus). Allow current proposers to broadcast immediate inclusion commitments (“I include tx X”) during the slot:contentReference[oaicite:209]{index=209}. *Solves:* Improves average-case inclusion time (txn confirmed in 0.5s instead of up to slot time). Requires slashing/conflict resolution rules. *Status:* Research stage (e.g. “Based Preconfirmations” on EthResearch); needs incentive design."


Front,Back
"Data Availability Sampling (DAS)","Upgrade: The Surge<br>What is it? A technique that allows nodes to verify data availability efficiently without downloading all data by sampling random portions and using statistical proofs.<br>Problem it solves: Enables higher transaction throughput by allowing nodes to verify data availability without storing entire datasets, critical for scaling to 100k+ TPS.<br>Current status & challenges: PeerDAS is in development and testing phase. Challenges include safety property formalization and network testing under heavy load.<br>[Diagrams showing sampling patterns and network data distribution would aid understanding]"
"PeerDAS (Peer Data Availability Sampling)","Upgrade: The Surge<br>What is it? A specific implementation of 1D data availability sampling using battle-tested P2P network components to distribute and verify blob data.<br>Problem it solves: Increases blob count target from 3 to 16, providing 463-926 TPS capacity for rollups while maintaining network security.<br>Current status & challenges: Immediate next step in Ethereum roadmap, actively being implemented. Challenge is progressive scaling while maintaining network safety.<br>[Network topology diagrams showing peer sampling patterns would be helpful]"
"Blobs","Upgrade: The Surge<br>What is it? Temporary data storage mechanism (approximately 125 kB per slot) introduced in Dencun upgrade, providing dedicated data availability bandwidth for rollups.<br>Problem it solves: Provides much cheaper data availability for rollups compared to calldata, reducing L2 transaction costs significantly.<br>Current status & challenges: Live since March 2024 with 3 blobs per slot, increasing to 6 in Pectra upgrade. Challenge is scaling to 16 MB per slot target.<br>[Data structure diagrams showing blob composition and lifecycle would clarify the concept]"
"Rollup Data Compression","Upgrade: The Surge<br>What is it? Techniques to reduce the size of transaction data posted to L1 by rollups, maximizing efficiency within data availability constraints.<br>Problem it solves: Maximizes transaction throughput within fixed data availability limits by reducing redundant data and optimizing encoding.<br>Current status & challenges: Ongoing research and development across multiple rollup teams. Challenge is balancing compression efficiency with verification speed.<br>[Compression ratio comparisons and data flow diagrams would be beneficial]"
"Native Rollups","Upgrade: The Surge<br>What is it? Creating multiple parallel instances of the EVM with flexible parameters, essentially built-in Layer 2 scaling at the protocol level.<br>Problem it solves: Enables L1 scaling through parallelization without increasing worst-case computational risks or breaking composability.<br>Current status & challenges: Conceptual/research phase. Major challenge is maintaining security and decentralization while scaling.<br>[Architecture diagrams showing parallel EVM instances would help visualization]"
"Multidimensional Gas Pricing","Upgrade: The Surge<br>What is it? Separate gas pricing dimensions for different resource types (computation, storage, bandwidth) instead of single gas price.<br>Problem it solves: Enables more efficient resource allocation and pricing by treating different blockchain resources separately.<br>Current status & challenges: Research phase with complexity concerns. Challenge is protocol complexity and EVM compatibility.<br>[Gas consumption matrices and pricing model diagrams would aid understanding]"
"Cross-L2 Interoperability","Upgrade: The Surge<br>What is it? Standardized protocols enabling seamless interaction between different Layer 2 solutions, creating unified user experience.<br>Problem it solves: Addresses fragmentation across the Layer 2 ecosystem, making Ethereum feel like one unified system rather than separate chains.<br>Current status & challenges: Various protocols in development (ERC-7683, RIP-7755). Challenges include standardization and user experience optimization.<br>[Cross-chain transaction flow and protocol interaction diagrams would be helpful]"
"FOCIL (Fork-Choice-Enforced Inclusion Lists)","Upgrade: The Scourge<br>What is it? A mechanism where a committee of validators creates mandatory inclusion lists of transactions that block builders must include, preventing censorship.<br>Problem it solves: Addresses centralization in block construction where two actors control ~88% of Ethereum block building, ensuring censorship resistance.<br>Current status & challenges: EIP-7805 in development. Challenges include optimizing for blob transactions and making it stateless-validator friendly.<br>[Committee structure and transaction inclusion flow diagrams would clarify the process]"
"APS (Auction Proposer Selection)","Upgrade: The Scourge<br>What is it? An in-protocol auction mechanism where the final block proposer is chosen by auction, maintaining economic efficiency while preserving censorship resistance.<br>Problem it solves: Balances economic efficiency with censorship resistance by combining with inclusion lists (FOCIL + APS).<br>Current status & challenges: Combined with FOCIL as integrated proposal. Challenge is designing optimal auction mechanisms.<br>[Auction process and authority distribution diagrams would be beneficial]"
"BRAID (Multiple Concurrent Proposers)","Upgrade: The Scourge<br>What is it? A system where multiple parallel proposers generate transaction lists simultaneously, then use deterministic algorithms to create final blocks.<br>Problem it solves: Distributes block production among many actors, avoiding the split between low and high economies-of-scale roles.<br>Current status & challenges: Early research phase. Requires encrypted mempools and is vulnerable to strategy-stealing attacks without privacy.<br>[Parallel proposer architecture and transaction merging diagrams would help]"
"MEV (Maximal Extractable Value)","Upgrade: The Scourge<br>What is it? Revenue extracted from on-chain transactions through reordering, insertion, and selection, including DEX arbitrage and sandwich attacks.<br>Problem it solves: The Scourge proposes making MEV revenue transparent and capturing it at protocol level to reduce centralization.<br>Current status & challenges: Active issue causing centralization - MEV represents 24% of validator rewards. Challenge is unstable income distribution.<br>[MEV extraction process and value flow diagrams would illustrate the concept]"
"MEVBoost","Upgrade: The Scourge<br>What is it? Extra-protocol proposer-builder separation system where validators auction block construction to specialized builders who maximize MEV.<br>Problem it solves: Originally intended to democratize MEV access but has led to centralization concerns.<br>Current status & challenges: Widely adopted (39% of blocks use Flashbots relay), but two builders control 88% of blocks, creating censorship risks.<br>[Current validator-builder separation architecture would be helpful to visualize]"
"Encrypted Mempool","Upgrade: The Scourge<br>What is it? Privacy-preserving transaction pool where transaction contents are hidden until block inclusion, preventing front-running attacks.<br>Problem it solves: Essential for BRAID and other multi-proposer schemes to prevent strategy-stealing and exploitation.<br>Current status & challenges: Research phase requiring robust and simple design that's both secure and practically implementable.<br>[Transaction privacy flow and revelation timing diagrams would clarify]"
"Inclusion Lists","Upgrade: The Scourge<br>What is it? Lists of transactions that must be included in blocks, created by validator committees to prevent censorship by dominant builders.<br>Problem it solves: Ensures important transactions cannot be indefinitely delayed by censoring block builders.<br>Current status & challenges: Multiple variants being researched (FOCIL, COMIS). Challenge is preventing MEV extraction at inclusion list level.<br>[Inclusion list creation and enforcement process diagrams would be beneficial]"
"Verkle Trees","Upgrade: The Verge<br>What is it? A tree structure using elliptic curve-based vector commitments to enable much more compact proofs compared to current Merkle Patricia trees.<br>Problem it solves: Reduces proof sizes from potentially 300MB to a few hundred kilobytes, enabling stateless validation and mobile verification.<br>Current status & challenges: Code is fairly mature but faces quantum vulnerability concerns. Complex to implement with SNARKs due to 256-bit operations.<br>[Tree structure diagrams showing proof size comparisons would be essential]"
"Stateless Clients","Upgrade: The Verge<br>What is it? Blockchain nodes that can verify blocks without storing the entire Ethereum state, using cryptographic witnesses instead.<br>Problem it solves: Reduces storage requirements from hundreds of gigabytes to a few gigabytes, enabling mobile device validation.<br>Current status & challenges: Under active development requiring fundamental protocol changes. Challenge is witness size and verification overhead.<br>[Architecture diagrams showing stateless vs stateful client requirements would help]"
"Witness Data","Upgrade: The Verge<br>What is it? Cryptographic proofs included with each block containing specific values accessed and cryptographic proof of correctness.<br>Problem it solves: Enables stateless validation by providing necessary state data without requiring full state storage.<br>Current status & challenges: Specification in progress via EIP-4762. Challenges include witness size optimization and verification overhead.<br>[Block structure diagrams showing witness data inclusion would be helpful]"
"SNARKs (Succinct Non-Interactive Arguments of Knowledge)","Upgrade: The Verge<br>What is it? Cryptographic proofs allowing verification of computation correctness without revealing inputs, with compact proof sizes (~288 bytes).<br>Problem it solves: Enables ultra-efficient verification of EVM execution and consensus, potentially on mobile devices.<br>Current status & challenges: Expanding scope beyond original Verkle focus. Challenges include trusted setup requirements and quantum vulnerability.<br>[Proof generation and verification flow diagrams would clarify the process]"
"STARKs (Scalable Transparent Arguments of Knowledge)","Upgrade: The Verge<br>What is it? Zero-knowledge proofs that don't require trusted setup, using publicly verifiable randomness and quantum-resistant cryptography.<br>Problem it solves: Provides quantum-resistant alternative to SNARKs with better scalability for large datasets.<br>Current status & challenges: Being considered as alternative to Verkle trees. Challenges include larger proof sizes (45,000 bytes) and higher verification costs.<br>[Comparison charts showing SNARK vs STARK trade-offs would be beneficial]"
"STARKed Binary Hash Trees","Upgrade: The Verge<br>What is it? Alternative to Verkle trees using STARK proofs with binary tree structure and traditional hash functions.<br>Problem it solves: Provides quantum-resistant stateless validation without elliptic curve vulnerabilities.<br>Current status & challenges: Under consideration as Verkle alternative. Challenges include computational intensity and specialized hardware requirements.<br>[Tree structure comparisons would help visualize the differences]"
"EIP-4762 (Statelessness Gas Cost Changes)","Upgrade: The Verge<br>What is it? Ethereum Improvement Proposal introducing gas schedule changes to reflect witness creation costs in stateless validation.<br>Problem it solves: Prevents DoS attacks by properly pricing witness-related operations and state access costs.<br>Current status & challenges: Draft specification requiring hard fork implementation. Challenges include backward compatibility and database restructuring.<br>[Gas cost comparison charts before/after implementation would be helpful]"
"Vector Commitments","Upgrade: The Verge<br>What is it? Cryptographic commitment scheme using elliptic curves, enabling compact proofs (32 bytes) regardless of tree width.<br>Problem it solves: Core component of Verkle trees that reduces proof size dramatically compared to traditional Merkle proofs.<br>Current status & challenges: Fundamental to Verkle trees implementation. Challenges include quantum vulnerability and complex cryptographic implementation.<br>[Commitment scheme diagrams showing proof size scaling would be beneficial]"
"EIP-4444 (History Expiry)","Upgrade: The Purge<br>What is it? Removes historical data storage requirements from nodes, keeping only approximately 365 days of blockchain history.<br>Problem it solves: Reduces node storage requirements and sync times, making it easier to run Ethereum nodes.<br>Current status & challenges: Ready for implementation, requires network protocol version update. Challenge is ensuring distributed storage solution.<br>[Storage requirement reduction charts would illustrate the benefits]"
"State Expiry","Upgrade: The Purge<br>What is it? Automatically expires infrequently accessed state data, using cryptographic proofs to revive expired data when needed.<br>Problem it solves: Prevents unlimited state growth by removing unused data while maintaining ability to access it when required.<br>Current status & challenges: Research phase with complex implementation requirements. Challenge is balancing access patterns with storage efficiency.<br>[State lifecycle and expiry process diagrams would clarify the mechanism]"
"EIP-6780 (SELFDESTRUCT Restriction)","Upgrade: The Purge<br>What is it? Limits the SELFDESTRUCT opcode functionality to reduce protocol complexity and improve security guarantees.<br>Problem it solves: Reduces protocol complexity, adds security guarantees, and enables more efficient storage slot usage.<br>Current status & challenges: Already implemented in Dencun hard fork. Impact includes enabling more storage slots per block.<br>[Before/after opcode behavior diagrams would help understanding]"
"Portal Network","Upgrade: The Purge<br>What is it? Ethereum-native distributed storage network for serving historical blockchain data after history expiry.<br>Problem it solves: Provides decentralized access to historical data without requiring full node storage.<br>Current status & challenges: Development phase as alternative to torrent solutions. Challenges include network bootstrapping and data availability.<br>[Network architecture diagrams showing data distribution would be helpful]"
"SimpleSerialize (SSZ) Migration","Upgrade: The Purge<br>What is it? Moving from RLP to SSZ format for cleaner, more efficient serialization throughout Ethereum protocol.<br>Problem it solves: Provides cleaner, more efficient serialization format with better developer experience and performance.<br>Current status & challenges: Consensus layer complete, execution layer transition planned. Challenge is migration complexity from RLP.<br>[Serialization format comparisons would illustrate the improvements]"
"Single-Slot Finality (SSF)","Upgrade: The Merge<br>What is it? Mechanism to finalize transactions in a single slot (12 seconds) rather than requiring multiple epochs (~15 minutes).<br>Problem it solves: Dramatically reduces transaction confirmation time from 15 minutes to 12 seconds, improving user experience.<br>Current status & challenges: Active research with multiple approaches (Orbit SSF, brute force). Challenge is managing signatures from 500k+ validators.<br>[Timeline comparison of current vs SSF finality would be beneficial]"
"Orbit SSF","Upgrade: The Merge<br>What is it? Committee-based approach to single-slot finality using randomly selected validator committees with rotation.<br>Problem it solves: Reduces validator signature load while maintaining security for single-slot finality.<br>Current status & challenges: Very recent research proposal. Challenge is balancing security, performance, and decentralization.<br>[Committee selection and rotation diagrams would help understanding]"
"Distributed Validator Technology (DVT)","Upgrade: The Merge<br>What is it? Splitting validator duties across multiple entities, creating ""multisig for staking"" functionality.<br>Problem it solves: Reduces single points of failure and centralization risks in validator operations.<br>Current status & challenges: Active development and testing. Challenges include coordination complexity and performance optimization.<br>[Validator architecture and duty distribution diagrams would be helpful]"
"Proof-of-Stake (PoS)","Upgrade: The Merge<br>What is it? Consensus mechanism where validators stake ETH to participate in block validation and earn rewards.<br>Problem it solves: Replaced energy-intensive Proof-of-Work with energy-efficient consensus mechanism.<br>Current status & challenges: Completed September 2022. Ongoing challenges include centralization risks and validator accessibility.<br>[Consensus process flow diagrams would illustrate the mechanism]"
"Beacon Chain","Upgrade: The Merge<br>What is it? Ethereum's proof-of-stake consensus layer that coordinates validators and manages the consensus protocol.<br>Problem it solves: Provides the consensus infrastructure for proof-of-stake Ethereum.<br>Current status & challenges: Launched December 2020, merged with execution layer September 2022. Challenge is ongoing optimization and upgrades.<br>[Beacon chain architecture and validator interaction diagrams would be helpful]"
"EOF (EVM Object Format)","Upgrade: The Splurge<br>What is it? New bytecode format for EVM enabling various optimizations and cleaner contract deployment.<br>Problem it solves: Reduces gas costs for specific operations and enables multidimensional gas within controlled environment.<br>Current status & challenges: Development ongoing with multiple EIPs. Challenge is transition complexity and backward compatibility.<br>[Bytecode structure comparisons would show the improvements]"
"Account Abstraction","Upgrade: The Splurge<br>What is it? Making Ethereum accounts more programmable and flexible, enabling smart contract wallet functionality.<br>Problem it solves: Improves user experience by enabling features like social recovery, gas payment by others, and custom transaction logic.<br>Current status & challenges: ERC-4337 deployed March 2023, EIP-7702 in Pectra upgrade. Challenge is adoption and standardization.<br>[Account types and functionality comparisons would clarify the concept]"
"Quantum Resistance","Upgrade: The Splurge<br>What is it? Preparing Ethereum's cryptographic primitives for protection against quantum computer attacks.<br>Problem it solves: Ensures long-term security of Ethereum against future quantum computing threats.<br>Current status & challenges: Research phase with explicit integration planned across upgrade categories. Challenge is performance vs security trade-offs.<br>[Cryptographic primitive upgrade paths would be beneficial]"
"Precompiles","Upgrade: The Splurge<br>What is it? Native contract implementations for computationally intensive operations, executed outside the EVM.<br>Problem it solves: Provides efficient execution for complex cryptographic operations that would be too expensive in EVM.<br>Current status & challenges: Various precompiles being added/removed. Challenge is balancing functionality with protocol complexity.<br>[Precompile execution flow diagrams would illustrate the concept]"
"Danksharding","Upgrade: The Surge<br>What is it? Full sharding implementation with merged fee market where single proposer selects all transactions and data.<br>Problem it solves: Scales Ethereum to 100,000+ TPS by providing massive data availability for rollups.<br>Current status & challenges: Proto-Danksharding (EIP-4844) completed, full implementation planned. Challenge is maintaining decentralization at scale.<br>[Sharding architecture and data flow diagrams would be essential]"
"KZG Commitments","Upgrade: The Surge<br>What is it? Cryptographic commitments used to prove data availability for blob transactions without revealing all data.<br>Problem it solves: Enables efficient data availability proofs for rollup data in blob transactions.<br>Current status & challenges: Implemented in Dencun upgrade for blob transactions. Challenge is trusted setup requirements.<br>[Commitment and proof verification diagrams would clarify the process]"
"Proposer-Builder Separation (PBS)","Upgrade: The Scourge<br>What is it? Architecture separating block proposal rights from block construction, allowing specialized builders to optimize blocks.<br>Problem it solves: Originally intended to democratize MEV access while keeping validators simple.<br>Current status & challenges: Implemented via MEVBoost, causing centralization. Challenge is enshrining in protocol while maintaining decentralization.<br>[Role separation and responsibility diagrams would be helpful]"
"Light Clients","Upgrade: The Verge<br>What is it? Minimal nodes that can verify blockchain state without downloading full blocks or state data.<br>Problem it solves: Enables verification on resource-constrained devices like mobile phones and IoT devices.<br>Current status & challenges: Supported by sync committees post-Merge. Challenge is reducing proof sizes and verification overhead.<br>[Light client architecture and verification flow would be beneficial]"
"Sync Committees","Upgrade: The Merge<br>What is it? Specialized groups of validators that sign block headers to enable light client verification.<br>Problem it solves: Provides cryptographic proof of chain validity for light clients without requiring full validation.<br>Current status & challenges: Active since Merge, rotated every 27 hours. Challenge is balancing security with efficiency.<br>[Committee selection and signing process diagrams would help]"
"Slashing","Upgrade: The Merge<br>What is it? Penalty mechanism that destroys staked ETH for malicious or incorrect validator behavior.<br>Problem it solves: Provides economic incentive for validators to behave honestly and follow protocol rules.<br>Current status & challenges: Active in proof-of-stake consensus. Challenge is balancing penalties with legitimate mistakes.<br>[Slashing conditions and penalty calculation diagrams would be helpful]"
"Finality","Upgrade: The Merge<br>What is it? Cryptographic guarantee that blocks cannot be altered, achieved through supermajority validator agreement.<br>Problem it solves: Provides certainty that transactions are permanent and cannot be reversed.<br>Current status & challenges: Currently takes ~15 minutes, target is 12 seconds with SSF. Challenge is maintaining security with faster finality.<br>[Finality process and timeline diagrams would illustrate the concept]"
"Casper FFG","Upgrade: The Merge<br>What is it? Finality gadget providing crypto-economic security through penalty mechanisms for incorrect votes.<br>Problem it solves: Ensures finality in proof-of-stake by making it expensive to attack finalized blocks.<br>Current status & challenges: Active component of Ethereum consensus. Challenge is ongoing optimization and potential replacement with SSF.<br>[Voting and penalty mechanism diagrams would be helpful]"
"LMD GHOST","Upgrade: The Merge<br>What is it? Fork choice rule determining which chain is canonical based on latest message-driven greedy heaviest observed subtree.<br>Problem it solves: Provides deterministic chain selection in proof-of-stake environment with potential forks.<br>Current status & challenges: Active fork choice rule post-Merge. Challenge is optimization and potential improvements.<br>[Fork choice decision tree diagrams would illustrate the algorithm]"
"Blob Fee Market","Upgrade: The Surge<br>What is it? Separate pricing mechanism for blob transactions, independent of regular gas fees.<br>Problem it solves: Provides predictable and separate pricing for rollup data availability.<br>Current status & challenges: Active since Dencun upgrade. Challenge is balancing pricing with rollup adoption.<br>[Fee market dynamics and pricing charts would be beneficial]"
"Attestations","Upgrade: The Merge<br>What is it? Validator votes on chain head and finality, providing consensus on the current state of the blockchain.<br>Problem it solves: Enables consensus in proof-of-stake by aggregating validator opinions on chain validity.<br>Current status & challenges: Core component of proof-of-stake consensus. Challenge is scaling with increasing validator count.<br>[Attestation process and aggregation diagrams would help understanding]"
"Inactivity Leak","Upgrade: The Merge<br>What is it? Mechanism that reduces inactive validator balances to recover from situations where >1/3 of validators are offline.<br>Problem it solves: Ensures network can recover and maintain finality even during major validator outages.<br>Current status & challenges: Safety mechanism in proof-of-stake. Challenge is calibrating leak rate for various scenarios.<br>[Inactivity leak scenarios and recovery process would be helpful]"
"Validator Queue","Upgrade: The Merge<br>What is it? System managing validator entries and exits to maintain network stability and prevent rapid stake changes.<br>Problem it solves: Prevents rapid changes in validator set that could destabilize consensus.<br>Current status & challenges: Active with current limits. Challenge is balancing accessibility with stability.<br>[Queue management and processing rate diagrams would illustrate the system]"
"Withdrawal Credentials","Upgrade: The Merge<br>What is it? Cryptographic specification determining where validator rewards and principal can be withdrawn.<br>Problem it solves: Enables secure withdrawal of staked ETH and rewards while maintaining validator security.<br>Current status & challenges: Withdrawals enabled since Shanghai upgrade. Challenge is managing transition to execution layer withdrawals.<br>[Withdrawal process and credential types would be helpful]"
"MEV Smoothing","Upgrade: The Scourge<br>What is it? Mechanism to distribute MEV rewards more evenly across validators rather than concentrating in block proposers.<br>Problem it solves: Reduces income volatility and centralization incentives from uneven MEV distribution.<br>Current status & challenges: Proposed solution under research. Challenge is implementation complexity and economic modeling.<br>[MEV distribution before/after smoothing would illustrate the concept]"
"Execution Tickets","Upgrade: The Scourge<br>What is it? Market mechanism for trading future block proposal rights, separating staking from block production.<br>Problem it solves: Enables specialization in block production while maintaining decentralized staking.<br>Current status & challenges: Theoretical proposal under research. Challenge is maintaining security while enabling markets.<br>[Ticket trading and execution process diagrams would be helpful]"

Front;Back
Verkle trees;Upgrade: The Verge<br>What is it? A vector-commitment data structure that generalizes Merkle trees but stores many more child pointers per node, allowing proofs to stay small and verification fast[1].<br>Problem it solves: Enables “stateless” clients by letting witnesses shrink from ~500 kB to ~150 bytes, slashing bandwidth and storage for validators[1].<br>Current status & challenges: Reference implementations exist; mainnet activation targeted post-EIP-4844 but requires audited libraries and a migration plan from the Merkle-Patricia trie[1].<br>Illustrative image: Side-by-side diagram of a sparse Merkle-Patricia trie versus a compact Verkle tree with KZG commitments[1].
SSZ (Simple Serialize);Upgrade: Consensus & Beyond<br>What is it? A byte-level serialization standard with fixed-length offsets that replace RLP for deterministic hashing and easy Merkleization[1].<br>Problem it solves: Eliminates ambiguity in encoding, reducing consensus bugs and making Merkle proofs trivial to compute[1].<br>Current status & challenges: Already live in the Beacon Chain; work continues on SSZ for execution-layer objects[1].<br>Illustrative image: Flowchart showing SSZ chunks flowing into a Merkle tree root vs RLP blobs[1].
FOCIL;Upgrade: Infrastructure<br>What is it? Proposed “Fork-Choice Interface Layer” that decouples fork-choice logic from clients[1].<br>Problem it solves: Lets researchers test new fork-choice algorithms without touching consensus code[1].<br>Current status & challenges: Research draft, awaiting spec finalization[1].<br>Illustrative image: Layer diagram with execution engine, FOCIL module, and networking stack[1].
Proto-Danksharding (EIP-4844);Upgrade: The Surge<br>What is it? Introduces blob-carrying transactions storing large data chunks separate from call-data[1].<br>Problem it solves: Slashes rollup fees 10-100× by pricing DA separately and pruning after 30 days[1].<br>Current status & challenges: Targeted for Cancun–Deneb hard fork; KZG audits in progress[1].<br>Illustrative image: L2 rollup posting a blob alongside its L1 transaction[1].
Danksharding;Upgrade: The Surge<br>What is it? Final sharding design with 64+ data rows sampled via DAS and single proposer[1].<br>Problem it solves: Increases DA bandwidth >1 MB/s, enabling thousands of rollup TPS[1].<br>Current status & challenges: Research phase on row size and builder proposer workflows[1].<br>Illustrative image: Grid of data rows with random sampling paths illustrating DAS[1].
KZG commitments;Upgrade: The Surge/The Verge<br>What is it? Polynomial commitment scheme using pairings on BLS12-381 to verify blob data succinctly[1].<br>Problem it solves: Enables validators to verify large data blobs with 48-byte proofs[1].<br>Current status & challenges: Cryptographic audits underway; ceremony completed[1].<br>Illustrative image: Math depiction of polynomial evaluation points with commitment and proof[1].
Data availability sampling;Upgrade: The Surge<br>What is it? Light client technique where nodes randomly sample small pieces of blob data to probabilistically confirm full availability[1].<br>Problem it solves: Removes requirement to download entire blobs, allowing cheap validation[1].<br>Current status & challenges: Simulation research continues on sample counts vs adversary strength[1].<br>Illustrative image: Random sampling arrows over a data grid[1].
Rollups;Upgrade: Scaling Ecosystem<br>What is it? Layer 2 chains (optimistic or ZK) that derive security from L1 but process transactions off-chain[1].<br>Problem it solves: Massive TPS increase while keeping decentralization; foundation for Surge economics[1].<br>Current status & challenges: Mainnet ZK-EVMs live; fee reduction hinges on EIP-4844 blobs[1].<br>Illustrative image: Diagram of users → rollup sequencer → compressed batch → Ethereum L1[1].
PBS (Proposer-Builder Separation);Upgrade: The Scourge<br>What is it? Division of labor where specialized builders assemble blocks and proposers just pick the highest-value bid[1].<br>Problem it solves: Mitigates MEV centralization by shifting complexity away from validators[1].<br>Current status & challenges: Enshrined PBS spec drafted; needs cryptoeconomic incentives and censorship-resistance proofs[1].<br>Illustrative image: Flowchart linking builders, relays, and validators with bid arrows[1].
MEV inclusion lists;Upgrade: The Scourge<br>What is it? Lists of user transactions that a proposer must include to avoid censorship[1].<br>Problem it solves: Combats builder censorship and out-of-protocol bribes by forcing baseline fairness[1].<br>Current status & challenges: Open questions around list size limits and griefing vectors[1].<br>Illustrative image: Block template with mandatory inclusion list highlighted in green[1].
MEV Burn;Upgrade: The Scourge<br>What is it? Design where extracted MEV is burned (not paid to validators) to neutralize centralization incentives[1].<br>Problem it solves: Aligns MEV with ETH value, discouraging cartel formation[1].<br>Current status & challenges: Early economic modeling; needs EIP draft and community debate[1].<br>Illustrative image: ETH tokens disappearing into a burn address as MEV is destroyed[1].
Single-slot finality (SSF);Upgrade: Consensus Hardening<br>What is it? Tweaks the beacon chain to finalize blocks in 12 seconds, not 2–15 minutes[1].<br>Problem it solves: Greatly improves UX and reduces MEV re-org risk[1].<br>Current status & challenges: Research on quadratic witness message overhead and honest minority assumptions[1].<br>Illustrative image: Timeline showing current finality vs single-slot finality[1].
Inclusion lists;Upgrade: The Scourge<br>What is it? Mandatory tx list attached to proposer payloads to guarantee censorship resistance (synonym of MEV inclusion lists)[1].<br>Problem it solves: Provides user liveness without external relays[1].<br>Current status & challenges: Needs mechanism to punish non-inclusion without over-penalizing mistakes[1].<br>Illustrative image: Block payload schema with “IL” field[1].
Account abstraction;Upgrade: The Splurge<br>What is it? Moves smart-wallet logic on-chain so externally owned accounts (EOAs) can use custom auth schemes and pay fees in any token[1].<br>Problem it solves: Improves UX (social recovery, sponsor fees) and reduces wallet fragmentation[1].<br>Current status & challenges: ERC-4337 live on mainnet via bundlers; native AA (EIP-3074 / EIP-4337 v2) under debate[1].<br>Illustrative image: User wallet with plugin-style validation modules[1].
ERC-4337;Upgrade: The Splurge<br>What is it? Smart-contract-level AA using a separate mempool and “bundler” relayers[1].<br>Problem it solves: Deploys account abstraction without consensus-layer changes[1].<br>Current status & challenges: Mainnet live; scaling depends on bundler incentives and spam mitigation[1].<br>Illustrative image: Bundler packaging multiple UserOps into a single transaction[1].
Stateless clients;Upgrade: The Verge<br>What is it? Validators that keep no state but receive small witnesses along with each block[1].<br>Problem it solves: Lets hobbyist hardware join consensus and eases network resource requirements[1].<br>Current status & challenges: Requires Verkle tree migration and efficient witness propagation[1].<br>Illustrative image: Raspberry Pi validator receiving a tiny witness blob[1].
Witness (stateless);Upgrade: The Verge<br>What is it? Proof containing the subset of state data needed to verify a given block[1].<br>Problem it solves: Allows stateless nodes to validate blocks without holding full state[1].<br>Current status & challenges: Compression techniques and gossip-layer integration are active R&D[1].<br>Illustrative image: Highlighted nodes in a Verkle tree constituting a witness[1].
EIP-4444;Upgrade: The Purge<br>What is it? Prunes historical beacon & execution data older than one year from ordinary nodes[1].<br>Problem it solves: Saves ~7 TB disk growth over a decade, lowering hardware barriers[1].<br>Current status & challenges: Spec drafted; requires light-client sync and archival node incentives[1].<br>Illustrative image: Chart of disk usage plateauing after purge[1].
History expiry;Upgrade: The Purge<br>What is it? Blanket term for cutting old block bodies and receipts from state[1].<br>Problem it solves: Prevents unbounded disk growth[1].<br>Current status & challenges: Needs consensus on retention horizon and archival network design[1].<br>Illustrative image: Shrinking disk icon versus ever-growing bar[1].
Chain pruning;Upgrade: The Purge<br>What is it? Removal of obsolete trie nodes and legacy receipts from disk[1].<br>Problem it solves: Accelerates sync and lowers storage[1].<br>Current status & challenges: Requires coordinated cut-over to Verkle trees to avoid duplicate efforts[1].<br>Illustrative image: Gardener pruning branches off a tree to signify storage reduction[1].
EVM Object Format (EOF);Upgrade: The Splurge<br>What is it? New binary container for contract bytecode with sections (code, data, metadata) and prohibited self-modifying opcodes[1].<br>Problem it solves: Enables safe code analysis, versioning, and cheaper static jumps[1].<br>Current status & challenges: EOF-v1 merged in Cancun testnets; tooling migration underway[1].<br>Illustrative image: Contract bytecode laid out like an ELF file with headers[1].
EIP-4844;Upgrade: The Surge<br>What is it? Implements Proto-Danksharding (see card 4)[1].<br>Problem it solves: L2 fee reduction via blob space[1].<br>Current status & challenges: Cancun target[1].<br>Illustrative image: Same as Proto-Danksharding card[1].
Surge;Upgrade Family<br>What is it? Roadmap stage focused on scaling data throughput (EIP-4844, DAS)[1].<br>Problem it solves: Rollup costs and TPS bottlenecks[1].<br>Current status & challenges: EIP-4844 imminent, danksharding research ongoing[1].<br>Illustrative image: Roller-coaster ascending to huge TPS numbers[1].
Scourge;Upgrade Family<br>What is it? Stage aimed at neutralizing MEV and ensuring protocol credibly neutral block production[1].<br>Problem it solves: Centralization from MEV relays and builder cartels[1].<br>Current status & challenges: Enshrined PBS design in flux; needs community consensus[1].<br>Illustrative image: Scales balancing user fairness vs builder profits[1].
Purge;Upgrade Family<br>What is it? Stage dedicated to eliminating technical debt and reducing node resource usage (EIP-4444, Verkle witnesses)[1].<br>Problem it solves: Storage bloat and sync slowness[1].<br>Current status & challenges: Dependent on Verge completion[1].<br>Illustrative image: Broom sweeping old blocks into a bin[1].
Splurge;Upgrade Family<br>What is it? Miscellany of “fun” improvements like EOF, AA, precompiles, EVM384[1].<br>Problem it solves: Developer ergonomics and future-proofing[1].<br>Current status & challenges: Many EIPs staged for Cancun and Prague[1].<br>Illustrative image: Confetti burst over a checklist of cool features[1].
The Verge;Upgrade Family<br>What is it? Shift from Merkle-Patricia tries to Verkle trees enabling stateless clients[1].<br>Problem it solves: Node resource reduction[1].<br>Current status & challenges: Requires extensive client refactors and state migration tooling[1].<br>Illustrative image: Bridge from old trie to new Verkle structure[1].
Light clients;Upgrade: Cross-stage<br>What is it? Nodes that track only headers and perform DAS to verify availability[1].<br>Problem it solves: Mobile & browser-based secure verification[1].<br>Current status & challenges: Portal Network research in progress[1].<br>Illustrative image: Smartphone checking block headers via DAS[1].
Weak subjectivity checkpoint;Upgrade: Consensus security<br>What is it? Human-readable header hash periodically published to prevent long-range attacks[1].<br>Problem it solves: Lets new nodes sync safely without reprocessing years of history[1].<br>Current status & challenges: Discussion on social layer coordination and cadence[1].<br>Illustrative image: Calendar marking weekly checkpoint publication[1].
BLS12-381;Upgrade: Cryptography<br>What is it? Pairing-friendly curve used in beacon signatures and KZG[1].<br>Problem it solves: Provides secure aggregate signatures and polynomial commitments[1].<br>Current status & challenges: Widely adopted; hardware acceleration initiatives ongoing[1].<br>Illustrative image: Curve equation y² = x³ + 4 over prime field P with security bits labelled[1].
Halo 2 proving system;Upgrade: ZK Infrastructure<br>What is it? Recursive SNARK framework (PLONKish) without trusted setup for each circuit[1].<br>Problem it solves: Scalable ZK-EVM proofs for L2 compression and DAS sampling proofs[1].<br>Current status & challenges: Used by Zcash; integration into Ethereum rollups under development[1].<br>Illustrative image: Nested proof pyramid illustrating recursion[1].
Poseidon hash;Upgrade: Cryptography<br>What is it? SNARK-friendly permutation-based hash optimized for finite-field arithmetic[1].<br>Problem it solves: Cheaper proofs than SHA-256 or Keccak inside circuits[1].<br>Current status & challenges: Candidate for in-protocol precompile[1].<br>Illustrative image: “S-box + MDS” rounds visualized[1].
ZK-EVM;Upgrade: Layer 2<br>What is it? EVM-compatible ZK-rollup generating validity proofs for each batch[1].<br>Problem it solves: Trustless scaling with fast finality and cheaper exits vs optimistic rollups[1].<br>Current status & challenges: Scroll, Polygon zkEVM, and Linea mainnets live; proving cost optimization continues[1].<br>Illustrative image: Rollup block -> prover -> validity proof -> L1 verify[1].
PBS builder role;Upgrade: The Scourge<br>What is it? Specialized actor constructing full blocks in exchange for MEV bid[1].<br>Problem it solves: Concentrates MEV extraction in transparent market instead of private validator mempools[1].<br>Current status & challenges: Needs anti-collusion and liveness-fallback design[1].<br>Illustrative image: Auction diagram with builders bidding to proposer[1].
Execution-layer sharding;Upgrade: The Surge (alternate research)<br>What is it? Idea of splitting EL transaction processing across shards (largely superseded by danksharding)[1].<br>Problem it solves: Direct EL TPS scaling without L2s, though with higher complexity[1].<br>Current status & challenges: Deprioritized but concept informs rollup-centric roadmap[1].<br>Illustrative image: Multiple transaction queues feeding into mini-EVMs[1].
Layer 2 fee market;Upgrade: Economics<br>What is it? Blob fee mechanism where L1 charges ETH for DA blob space via separate EIP-1559-style curve[1].<br>Problem it solves: Prevents blob spam and balances L1/L2 demand[1].<br>Current status & challenges: Need empirical tuning after EIP-4844 launch[1].<br>Illustrative image: Dual-curve chart (base-fee vs blob-fee)[1].
Fraud proofs;Upgrade: Optimistic rollups<br>What is it? Proof that a rollup state transition was invalid, allowing L1 to revert[1].<br>Problem it solves: Ensures rollup security without heavy L1 computation[1].<br>Current status & challenges: Canonical interactive-fault-proof standardization pending[1].<br>Illustrative image: Binary search dispute game timeline[1].
Validity proofs;Upgrade: ZK rollups<br>What is it? SNARK attesting to correct execution of thousands of txs[1].<br>Problem it solves: No challenge window; immediate finality[1].<br>Current status & challenges: Proof cost and verifier gas optimization ongoing[1].<br>Illustrative image: Circuit diagram with constraints satisfied check-mark[1].
KZG polynomial commitment scheme;Upgrade: Surge/Verge support<br>What is it? Cryptographic primitive allowing succinct commitment to polynomial and evaluation proof[1].<br>Problem it solves: Succinct DA proofs for blobs and Verkle openings[1].<br>Current status & challenges: Multi-party trusted setup completed; library integration underway[1].<br>Illustrative image: Polynomial curve with commitment point and evaluation proof arrow[1].
EIP-6780 SELFDESTRUCT changes;Upgrade: Semantics cleanup (Purge)
What is it? Removes state-clearing semantics of SELFDESTRUCT, turning it into a no-op for storage and balance changes[1].
Problem it solves: Simplifies state accounting and aids Verkle migration[1].
Current status & challenges: Included in Cancun; requires dapp refactors[1].
Illustrative image: Bomb icon crossed out next to contract storage[1].
Precompile upgrades;Upgrade: Splurge
What is it? Adding new cryptographic precompiles (e.g., BLS, Poseidon) for cheaper on-chain crypto[1].
Problem it solves: Lowers gas cost of privacy and ZK apps[1].
Current status & challenges: Benchmarking and security audits in progress[1].
Illustrative image: Toolbox of cryptographic gadgets stamped “precompile”[1].
EIP-1153 Transient Storage;Upgrade: Splurge
What is it? Adds TSTORE/TLOAD opcodes for temporary per-transaction storage that clears at end of txn[1].
Problem it solves: Enables efficient flash-loan style state without long-term bloat[1].
Current status & challenges: Waiting on EOF merge conflicts resolution[1].
Illustrative image: Whiteboard that wipes clean after a single use[1].
EIP-4788 Beacon root in EVM;Upgrade: Consensus/Execution bridging
What is it? Exposes recent beacon chain root to the EVM via a system contract[1].
Problem it solves: Lets staking pools and bridges verify CL data trustlessly[1].
Current status & challenges: Slated for Cancun; gas cost tuning continues[1].
Illustrative image: Execution block querying beacon root via system call[1].
Verkle proof witnesses;Upgrade: Verge
What is it? Serialized payloads containing commitments, branch indices, and KZG proofs for a state access[1].
Problem it solves: Stateless validation bandwidth efficiency[1].
Current status & challenges: Encoding standardization open[1].
Illustrative image: JSON-like witness object annotated[1].
Binary trie vs Verkle;Upgrade: Verge
What is it? Comparison of current hexary Merkle-Patricia trie to upcoming high-fan-out Verkle[1].
Problem it solves: Highlights database compression benefits[1].
Current status & challenges: Migration scripts and re-hashing performance[1].
Illustrative image: Hexary tree vs 256-ary Verkle node side-by-side[1].
Data availability layer separation;Upgrade: Surge
What is it? Idea of outsourcing DA to separate chains (Celestia-style)﻿—Ethereum instead chose in-protocol danksharding[1].
Problem it solves: Untangles execution from DA bottlenecks[1].
Current status & challenges: Still relevant for alt-L1 rollups[1].
Illustrative image: Two-layer stack showing execution vs DA blockchain[1].
Fork-choice rule improvements;Upgrade: Consensus tweaks
What is it? Optimizations to LMD-GHOST and proposer-boost to reduce re-orgs[1].
Problem it solves: Stability during network latency spikes[1].
Current status & challenges: Ongoing academic analysis[1].
Illustrative image: Fork graph converging quicker after tweak[1].
SSZ Merkleization;Upgrade: Verge support
What is it? Deriving Merkle roots over SSZ-serialized containers for light-client proofs[1].
Problem it solves: Efficient inclusion proofs of consensus objects[1].
Current status & challenges: Implemented in CL clients, EL adoption pending[1].
Illustrative image: SSZ container → chunk → Merkle tree arrows[1].
PeerDAS;Upgrade: Surge networking
What is it? P2P sub-protocol for distributing and sampling blobs among validators[1].
Problem it solves: Reduces gossip overhead and ensures DA sampling coverage[1].
Current status & challenges: Spec draft under review[1].
Illustrative image: Mesh network nodes exchanging blob parts[1].
Parallelisation;Upgrade: Execution scalability
What is it? Allowing independent transactions to run concurrently in EL clients by slicing state access sets[1].
Problem it solves: Higher real TPS on single-threaded hardware[1].
Current status & challenges: Prototyped in Reth & Erigon; needs conflict-detection spec[1].
Illustrative image: CPU core chart executing multiple tx threads in parallel[1]
